// <auto-generated />
using System;
using Dern_Support_System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dern_Support_System.Migrations
{
    [DbContext(typeof(DernSupportDbContext))]
    [Migration("20240913000543_SeedDataKnowledgeBase")]
    partial class SeedDataKnowledgeBase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dern_Support_System.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Dern_Support_System.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Dern_Support_System.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SupportRequestId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SupportRequestId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Dern_Support_System.Models.KnowledgeBase", b =>
                {
                    b.Property<int>("KnowledgeBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KnowledgeBaseId"));

                    b.Property<string>("HardwareOrSoftware")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionSteps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KnowledgeBaseId");

                    b.ToTable("KnowledgeBases");

                    b.HasData(
                        new
                        {
                            KnowledgeBaseId = 1,
                            HardwareOrSoftware = "Hardware",
                            ProblemDescription = "The printer is not responding when trying to print.",
                            SolutionSteps = "1. Check if the printer is powered on.\n2. Ensure the printer is connected to the computer.\n3. Restart the printer and try again.",
                            Title = "Printer Not Working"
                        },
                        new
                        {
                            KnowledgeBaseId = 2,
                            HardwareOrSoftware = "Software",
                            ProblemDescription = "Error occurs during the installation of software X.",
                            SolutionSteps = "1. Ensure that the installation package is not corrupted.\n2. Check for sufficient disk space.\n3. Run the installer as an administrator.",
                            Title = "Software Installation Error"
                        },
                        new
                        {
                            KnowledgeBaseId = 3,
                            HardwareOrSoftware = "Hardware",
                            ProblemDescription = "Computer is running slower than usual.",
                            SolutionSteps = "1. Check for any background programs consuming too many resources.\n2. Run a disk cleanup and defragmentation.\n3. Consider upgrading the RAM if necessary.",
                            Title = "Slow Computer Performance"
                        },
                        new
                        {
                            KnowledgeBaseId = 4,
                            HardwareOrSoftware = "Software",
                            ProblemDescription = "Unable to connect to the internet.",
                            SolutionSteps = "1. Restart the modem and router.\n2. Check if the network cables are properly connected.\n3. Verify the network adapter settings.",
                            Title = "Internet Connectivity Issue"
                        },
                        new
                        {
                            KnowledgeBaseId = 5,
                            HardwareOrSoftware = "Hardware",
                            ProblemDescription = "The computer crashes with a blue screen displaying an error message.",
                            SolutionSteps = "1. Check if any recent hardware changes or driver installations have been made.\n2. Ensure all drivers are up to date.\n3. Run a memory diagnostic test to check for faulty RAM.\n4. Perform a system restore to a previous stable state.",
                            Title = "Blue Screen of Death (BSOD)"
                        },
                        new
                        {
                            KnowledgeBaseId = 6,
                            HardwareOrSoftware = "Software",
                            ProblemDescription = "Emails are not syncing in the mail client (e.g., Outlook, Thunderbird).",
                            SolutionSteps = "1. Check if the internet connection is stable.\n2. Verify email account settings (server details, port numbers, and authentication).\n3. Restart the email client or reboot the device.\n4. Reconfigure the email account if necessary.",
                            Title = "Email Not Syncing"
                        },
                        new
                        {
                            KnowledgeBaseId = 7,
                            HardwareOrSoftware = "Hardware",
                            ProblemDescription = "The computer fails to load the operating system during startup.",
                            SolutionSteps = "1. Check for any loose or disconnected cables inside the computer.\n2. Ensure the boot order is correctly configured in the BIOS.\n3. Use the OS recovery tool to repair the bootloader.\n4. If the issue persists, reinstall the operating system.",
                            Title = "Operating System Won't Boot"
                        },
                        new
                        {
                            KnowledgeBaseId = 8,
                            HardwareOrSoftware = "Software",
                            ProblemDescription = "The application crashes unexpectedly when trying to perform a specific action.",
                            SolutionSteps = "1. Check if the application is up to date with the latest version.\n2. Review the application logs for any error messages or exceptions.\n3. Uninstall and reinstall the application.\n4. If the issue persists, contact the application's support team.",
                            Title = "Application Crashing"
                        },
                        new
                        {
                            KnowledgeBaseId = 9,
                            HardwareOrSoftware = "Hardware",
                            ProblemDescription = "The computer is unable to read from or write to the hard drive, and data is inaccessible.",
                            SolutionSteps = "1. Check if the hard drive is properly connected to the motherboard.\n2. Use disk repair tools (e.g., chkdsk) to scan for bad sectors.\n3. If the hard drive is beyond repair, replace it and restore data from backups.",
                            Title = "Hard Drive Failure"
                        },
                        new
                        {
                            KnowledgeBaseId = 10,
                            HardwareOrSoftware = "Hardware",
                            ProblemDescription = "The network printer shows as offline and cannot receive print jobs.",
                            SolutionSteps = "1. Restart the printer and check if it's properly connected to the network.\n2. Verify the printer's IP address and ensure it's correct in the printer settings.\n3. Remove and re-add the printer on the computer.\n4. Check firewall settings to ensure the printer is not being blocked.",
                            Title = "Network Printer Offline"
                        });
                });

            modelBuilder.Entity("Dern_Support_System.Models.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuoteId"));

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupportRequestId")
                        .HasColumnType("int");

                    b.HasKey("QuoteId");

                    b.HasIndex("SupportRequestId")
                        .IsUnique();

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("Dern_Support_System.Models.RepairJob", b =>
                {
                    b.Property<int>("RepairJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairJobId"));

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupportRequestId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeTaken")
                        .HasColumnType("datetime2");

                    b.HasKey("RepairJobId");

                    b.HasIndex("SupportRequestId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("RepairJobs");
                });

            modelBuilder.Entity("Dern_Support_System.Models.RepairJobSparePart", b =>
                {
                    b.Property<int>("RepairJobId")
                        .HasColumnType("int");

                    b.Property<int>("SparePartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("RepairJobId", "SparePartId");

                    b.HasIndex("SparePartId");

                    b.ToTable("RepairJobSpareParts");
                });

            modelBuilder.Entity("Dern_Support_System.Models.SparePart", b =>
                {
                    b.Property<int>("SparePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SparePartId"));

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReorderThreshold")
                        .HasColumnType("int");

                    b.Property<int>("StockLevel")
                        .HasColumnType("int");

                    b.HasKey("SparePartId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("Dern_Support_System.Models.SupportRequest", b =>
                {
                    b.Property<int>("SupportRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupportRequestId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KnowledgeBaseId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuoteId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupportRequestId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("KnowledgeBaseId");

                    b.ToTable("SupportRequests");
                });

            modelBuilder.Entity("Dern_Support_System.Models.Technician", b =>
                {
                    b.Property<int>("TechnicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianId"));

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicianId");

                    b.ToTable("Technicians");

                    b.HasData(
                        new
                        {
                            TechnicianId = 1,
                            Availability = "Available",
                            Name = "John Doe",
                            Specialization = "Electrical"
                        },
                        new
                        {
                            TechnicianId = 2,
                            Availability = "Not Available",
                            Name = "Jane Smith",
                            Specialization = "HVAC"
                        },
                        new
                        {
                            TechnicianId = 4,
                            Availability = "Available",
                            Name = "John Doe",
                            Specialization = "Electrical"
                        },
                        new
                        {
                            TechnicianId = 5,
                            Availability = "Busy",
                            Name = "Jane Smith",
                            Specialization = "HVAC"
                        },
                        new
                        {
                            TechnicianId = 6,
                            Availability = "Available",
                            Name = "Robert Johnson",
                            Specialization = "Plumbing"
                        });
                });

            modelBuilder.Entity("Dern_Support_System.Models.TechnicianTask", b =>
                {
                    b.Property<int>("TechnicianTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TechnicianTaskId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnicianTaskId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("TechnicianTasks");

                    b.HasData(
                        new
                        {
                            TechnicianTaskId = 1,
                            Description = "Fix the power outage in the main office.",
                            Status = "In Progress",
                            TechnicianId = 1,
                            Title = "Power Outage Repair"
                        },
                        new
                        {
                            TechnicianTaskId = 2,
                            Description = "Repair the broken circuit in server room.",
                            Status = "Pending",
                            TechnicianId = 2,
                            Title = "Broken Circuit"
                        },
                        new
                        {
                            TechnicianTaskId = 3,
                            Description = "Inspect wiring in server room for damage.",
                            Status = "Pending",
                            TechnicianId = 1,
                            Title = "Check Wiring"
                        },
                        new
                        {
                            TechnicianTaskId = 4,
                            Description = "Replace faulty light fixture in lobby.",
                            Status = "In Progress",
                            TechnicianId = 3,
                            Title = "Repair Light Fixture"
                        },
                        new
                        {
                            TechnicianTaskId = 5,
                            Description = "Ensure all emergency lighting is operational.",
                            Status = "Completed",
                            TechnicianId = 2,
                            Title = "Test Emergency Lighting"
                        },
                        new
                        {
                            TechnicianTaskId = 6,
                            Description = "Upgrade the electrical panel to handle increased load.",
                            Status = "Pending",
                            TechnicianId = 3,
                            Title = "Upgrade Electrical Panel"
                        },
                        new
                        {
                            TechnicianTaskId = 7,
                            Description = "Check HVAC system for electrical issues.",
                            Status = "In Progress",
                            TechnicianId = 1,
                            Title = "Inspect HVAC System"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            ConcurrencyStamp = "66abc4ff-34ce-4a70-82a6-b07c5b9f7fae",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "businesscustomer",
                            ConcurrencyStamp = "4072a0a6-0d0e-4c74-bfc7-e4949d5bf1f5",
                            Name = "BusinessCustomer",
                            NormalizedName = "BUSINESSCUSTOMER"
                        },
                        new
                        {
                            Id = "individualcustomer",
                            ConcurrencyStamp = "dcc451cb-f662-4af2-a47e-2458977af000",
                            Name = "IndividualCustomer",
                            NormalizedName = "INDIVIDUALCUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2055279588,
                            ClaimType = "permission",
                            ClaimValue = "update",
                            RoleId = "admin"
                        },
                        new
                        {
                            Id = 750832786,
                            ClaimType = "permission",
                            ClaimValue = "read",
                            RoleId = "admin"
                        },
                        new
                        {
                            Id = -1862407115,
                            ClaimType = "permission",
                            ClaimValue = "delete",
                            RoleId = "admin"
                        },
                        new
                        {
                            Id = -1870649806,
                            ClaimType = "permission",
                            ClaimValue = "create",
                            RoleId = "admin"
                        },
                        new
                        {
                            Id = 467305327,
                            ClaimType = "permission",
                            ClaimValue = "update",
                            RoleId = "businesscustomer"
                        },
                        new
                        {
                            Id = 1642459346,
                            ClaimType = "permission",
                            ClaimValue = "read",
                            RoleId = "businesscustomer"
                        },
                        new
                        {
                            Id = 971440829,
                            ClaimType = "permission",
                            ClaimValue = "delete",
                            RoleId = "businesscustomer"
                        },
                        new
                        {
                            Id = 1730885888,
                            ClaimType = "permission",
                            ClaimValue = "create",
                            RoleId = "businesscustomer"
                        },
                        new
                        {
                            Id = -1863342208,
                            ClaimType = "permission",
                            ClaimValue = "update",
                            RoleId = "individualcustomer"
                        },
                        new
                        {
                            Id = -1289150110,
                            ClaimType = "permission",
                            ClaimValue = "read",
                            RoleId = "individualcustomer"
                        },
                        new
                        {
                            Id = -1343740615,
                            ClaimType = "permission",
                            ClaimValue = "delete",
                            RoleId = "individualcustomer"
                        },
                        new
                        {
                            Id = 1517946740,
                            ClaimType = "permission",
                            ClaimValue = "create",
                            RoleId = "individualcustomer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Dern_Support_System.Models.Customer", b =>
                {
                    b.HasOne("Dern_Support_System.Models.AppUser", "AppUser")
                        .WithOne("Customer")
                        .HasForeignKey("Dern_Support_System.Models.Customer", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Dern_Support_System.Models.Feedback", b =>
                {
                    b.HasOne("Dern_Support_System.Models.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dern_Support_System.Models.SupportRequest", "SupportRequest")
                        .WithMany("Feedback")
                        .HasForeignKey("SupportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SupportRequest");
                });

            modelBuilder.Entity("Dern_Support_System.Models.Quote", b =>
                {
                    b.HasOne("Dern_Support_System.Models.SupportRequest", "SupportRequest")
                        .WithOne("Quote")
                        .HasForeignKey("Dern_Support_System.Models.Quote", "SupportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportRequest");
                });

            modelBuilder.Entity("Dern_Support_System.Models.RepairJob", b =>
                {
                    b.HasOne("Dern_Support_System.Models.SupportRequest", "SupportRequest")
                        .WithMany("RepairJobs")
                        .HasForeignKey("SupportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dern_Support_System.Models.Technician", "Technician")
                        .WithMany("RepairJobs")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportRequest");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Dern_Support_System.Models.RepairJobSparePart", b =>
                {
                    b.HasOne("Dern_Support_System.Models.RepairJob", "RepairJob")
                        .WithMany("RepairJobSpareParts")
                        .HasForeignKey("RepairJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dern_Support_System.Models.SparePart", "SparePart")
                        .WithMany("RepairJobSpareParts")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairJob");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("Dern_Support_System.Models.SupportRequest", b =>
                {
                    b.HasOne("Dern_Support_System.Models.Customer", "Customer")
                        .WithMany("SupportRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dern_Support_System.Models.KnowledgeBase", "KnowledgeBaseArticle")
                        .WithMany("SupportRequests")
                        .HasForeignKey("KnowledgeBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("KnowledgeBaseArticle");
                });

            modelBuilder.Entity("Dern_Support_System.Models.TechnicianTask", b =>
                {
                    b.HasOne("Dern_Support_System.Models.Technician", "Technician")
                        .WithMany("TechnicianTasks")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dern_Support_System.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dern_Support_System.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dern_Support_System.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dern_Support_System.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dern_Support_System.Models.AppUser", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("Dern_Support_System.Models.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("SupportRequests");
                });

            modelBuilder.Entity("Dern_Support_System.Models.KnowledgeBase", b =>
                {
                    b.Navigation("SupportRequests");
                });

            modelBuilder.Entity("Dern_Support_System.Models.RepairJob", b =>
                {
                    b.Navigation("RepairJobSpareParts");
                });

            modelBuilder.Entity("Dern_Support_System.Models.SparePart", b =>
                {
                    b.Navigation("RepairJobSpareParts");
                });

            modelBuilder.Entity("Dern_Support_System.Models.SupportRequest", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Quote")
                        .IsRequired();

                    b.Navigation("RepairJobs");
                });

            modelBuilder.Entity("Dern_Support_System.Models.Technician", b =>
                {
                    b.Navigation("RepairJobs");

                    b.Navigation("TechnicianTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
